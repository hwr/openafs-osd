/*
 * by Ludovico "BlackICE" Giammarino strongly remodeled by Hartmut Reuter
 */

package OSDDB_
prefix S

/* prototype for pseudo-RPC call */
%char *OSDDB_TranslateOpCode(afs_int32 code);

%#define OSDDB_SERVER_PORT		htons(7012)
%#define OSDDB_SERVICE_ID		13
%#define OSDDB_HASHSIZE  		251	/* must be prime (?) */
%#define OSDDB_HEADER_SIZE		8192
%#define OSDDB_ENTRY_LENGTH		1024	/* some spares left */
%#define OSDDB_VERSION     		3	
%#define OSDDB_ENTRY_VERSION     	3	
%#define OSDDB_MAXNAMELEN  		32	
%#define OSDDB_PRIORITY_MULTIPL		1000	

%#define OSDDB_FREE        		0	
%#define OSDDB_OSD         		1	
%#define OSDDB_POLICY      		2	
%#define OSDDB_SERVER      		3	
%#define OSDDB_GROUP       		4

%#define POL_OUTPUT_LONG		0
%#define POL_OUTPUT_HUMAN		1
%#define POL_OUTPUT_CRYPTIC		2
%#define POL_OUTPUT_TABULAR		3

struct osddb_header {		/* length  8192 */
	afs_uint32 osddbversion;
	afs_uint32 headerSize;
	afs_uint32 entrySize;	/* should be OSDDB_ENTRY_LENGTH */
	afs_uint32 freePtr;
	afs_uint32 eofPtr;
	afs_uint32 nOsds;
	afs_uint32 nPolicies;
	afs_uint32 nServers;
	afs_uint32 nGroups;
	afs_uint32 policies_revision;
	afs_uint32 spare[23];
	afs_uint32 osdNameHash[OSDDB_HASHSIZE];
	afs_uint32 osdIdHash[OSDDB_HASHSIZE];
	afs_uint32 polNameHash[OSDDB_HASHSIZE];
	afs_uint32 polIdHash[OSDDB_HASHSIZE];
	afs_uint32 srvNameHash[OSDDB_HASHSIZE];
	afs_uint32 srvIdHash[OSDDB_HASHSIZE];
	afs_uint32 grpNameHash[OSDDB_HASHSIZE];
	afs_uint32 grpIdHash[OSDDB_HASHSIZE];
};

struct osddb_osd {		
	afs_uint32 type;	/* rxosd or what ever else in the future */
	afs_uint32 minSize;	/* 1k blocks */
	afs_uint32 maxSize;	/* 1k blocks */
	afs_uint32 totalSize;	/* MBytes */
	afs_uint32 pmUsed; 	/* per mille of space used */
	afs_uint32 totalFiles;  /* M Files */
	afs_uint32 pmFilesUsed; /* per mille of inodes used */
	afs_uint32 ip;		/* for single homed osds */
	afs_uint32 service_port;  /* serviceId << 16 | port, both HBO */
	afs_uint32 lun;		/* partition id: /vicepa == 0 ... */
	afs_int32 alprior;	/* priority for allocation */
	afs_int32 rdprior;	/* priority for read */
	afs_uint32 newestWiped;	/* access time of newest wiped object */
	afs_int32 flags;	/* archival, wipeable, readonly ... */
	afs_uint32 unavail;	/* 0 or dead, obsolete, ... */
	afs_uint32 owner;	/* group which gets preferred service here */
	afs_uint32 location;    /* when cell is geographically distributed */
	afs_uint32 timeStamp;	/* when filesytem values were updated, 
				   used to detect dead osds */
	afs_uint32 highWaterMark; /* pmUsed when to start wipeing */
	afs_uint32 minWipeSize; /* Megabytes. files smaller are not wiped */
	afs_uint32 chosen; 	/* dummy field (0) used on filservers only */
};

%#define OSDDB_ARCHIVAL		1
%#define OSDDB_WIPEABLE		2
%#define OSDDB_HSM_ACCESS	4

%#define OSDDB_OSD_DOWN		1
%#define OSDDB_OSD_DEAD		2
%#define OSDDB_OSD_OBSOLETE	4
	
struct osddb_server {
	afs_uint32 ipaddr[16];
	afsUUID	   uuid;
	afs_uint32 priority;
	afs_uint32 owner;
	afs_uint32 location;
	afs_uint32 bonus;	/* add to priorities if same location */
	afs_uint32 malus;	/* subtract from priorities if not same location */
};

/* we now use bits 7 (dec. 128)  and above for flags, all LSBs are for base type */
%#define BASE_PREDTYPE(bits) ((bits)&0x7f)

%#define POLICY_EXPR_MAX	128
%#define POLICY_MIN_SIZE		0x01
%#define POLICY_MAX_SIZE		0x02
%#define POLICY_EXPR			0x03
%#define POLICY_USER			0x04
%#define POLICY_GROUP			0x05
%#define POLICY_REGEX			0x06
%#define POLICY_IREGEX			0x07

%#define PREDFLAG_ICASE			0x80
/* this flag is never serialized: */
%#define PREDFLAG_ANNOTATED		0x100

union pol_pred switch (afs_uint32 type) {
    case POLICY_MIN_SIZE:
    	afs_uint64 min_size;
    case POLICY_MAX_SIZE:
    	afs_uint64 max_size;
    case POLICY_EXPR:
    	string expression<POLICY_EXPR_MAX>;
    case POLICY_USER:
    	afs_int32 user_id;
    case POLICY_GROUP:
        afs_int32 group_id;
    case POLICY_REGEX:
    	string regex<POLICY_EXPR_MAX>;
    case POLICY_IREGEX:
    	string iregex<POLICY_EXPR_MAX>;
};

%#define POLCOND_AND		0x01
%#define POLCOND_OR		0x02
%#define POLCOND_NOT		0x03
%#define POLCOND_ATOM		0x04
%#define POLCOND_TRUE		0x05

struct cond_pair {
    struct pol_cond *left;
    struct pol_cond *right;
};

union pol_cond switch (afs_uint32 type) {
    case POLCOND_AND:		struct pol_condList *operands;
    case POLCOND_OR:		struct pol_condList *dummy; /* use operands instead */
    case POLCOND_NOT:		pol_cond *operand;
    case POLCOND_ATOM:		pol_pred predicate;
    default: void;
};
typedef struct pol_cond pol_condList<>;

%#define POL_LOC_OSD		0x1
%#define POL_LOC_LOCAL		0x2
%#define POL_LOC_DYNAMIC	0x3

/* bit usages of the verdict - plenty of space, so let's be generous */
%#define POLICY_LOCATION_MASK	0x0000000f
%#define POLICY_NSTRIPES_MASK	0x000000f0
%#define POLICY_SSTRIPES_MASK	0x0000ff00
%#define POLICY_NCOPIES_MASK	0x000f0000
%#define POLICY_CONT_OP_MASK	0x00f00000

/* and here is how to decode it */
%#define POLPROP_OSD(p)		(((p)&POLICY_LOCATION_MASK) == 1)
%#define POLPROP_LOCAL(p)	(((p)&POLICY_LOCATION_MASK) == 2)
%#define POLPROP_DYNAMIC(p)	(((p)&POLICY_LOCATION_MASK) == 3)
%#define POLPROP_LOCATION(p)	((p)&POLICY_LOCATION_MASK)
%#define POLPROP_NSTRIPES(p)	((((p)&POLICY_NSTRIPES_MASK)) >> 4)
%#define POLPROP_SSTRIPES(p)	((((p)&POLICY_SSTRIPES_MASK)) >> 8)
%#define POLPROP_NCOPIES(p)	((((p)&POLICY_NCOPIES_MASK)) >> 16)
%#define POLPROP_FORCE(p)	(((p)&POLICY_CONT_OP_MASK) != 0)

struct pol_rule {
	afs_uint32 used_policy;	/* when != 0, predicates matter not */
    	pol_cond condition;
	afs_uint32 properties;
};

typedef struct pol_rule pol_ruleList<>;

struct osddb_policy {
    pol_ruleList rules;
};

union etype switch (afs_uint32 type) {
case OSDDB_FREE:
		afs_int32 empty;	
case OSDDB_OSD:
		struct osddb_osd osd;
case OSDDB_POLICY:
		struct osddb_policy pol;
case OSDDB_SERVER:
		struct osddb_server srv;
};
typedef etype etypeList<>;

struct osddb_entry3 {
    afs_uint32 nextId;
    afs_uint32 nextName;
    afs_uint32 id;
    char name[OSDDB_MAXNAMELEN];
    etype t;
};

union oe switch (afs_int32 vsn) {
case 2:
    struct osddb_entry3 t2;
case 3:
    struct osddb_entry3 t3;
};
			
/**********************************************/

struct Osd {			
	afs_uint32 id;
	char name[OSDDB_MAXNAMELEN];
	etype t;
};
typedef Osd OsdList<>;


#define FULL_T10_PROTOCOL 1
#define CAP_ONLY_PROTOCOL 2

struct osddb_osd_tab {
	afs_uint32 id;
	char name[OSDDB_MAXNAMELEN];
	afs_uint32 minSize;	/* mininal object size in 1k blocks */
	afs_uint32 maxSize;	/* maximal object size in 1k blocks */
	afs_uint32 ip;		/* IPv4 address of the OSD */
	afs_uint32 lun;		/* partition number: /vicepa=0, /vivepb=1...*/
	afs_uint32 alprior;	/* priority for allocation */
	afs_uint32 rdprior;	/* priority for read */
	afs_uint32 newestWiped;	/* access time of newest wiped file */
	afs_uint32 flags;	/* whether OSD is wipeable, archival ...*/
	afs_uint32 unavail;	/* 0 if up, otherwise down or obsolete */
	afs_uint32 owner;	/* whom the OSD is reserved for */
	afs_uint32 location;	/* In case of geogr. wide spread cells */
	afs_uint32 highWaterMark; /* per mille when wiping should start */
	afs_uint32 minWipeSize; /* minimum object size for wiping */
	afs_uint32 type;   	/* fully T10 or Capabilities only*/
	afs_uint32 service_port; /* service id and port (900/7011) presently */
	afs_uint32 spare4;
};

struct osddb_server_tab {
	afs_uint32 id;
	char name[OSDDB_MAXNAMELEN];
	afs_uint32 owner;
	afs_uint32 location;
	afs_uint32 bonus;
	afs_uint32 malus;
};

struct activeRpc {
        afs_uint32 num;
        afs_uint32 ip;
        afs_uint32 port;
};
typedef activeRpc activeRpcList<>;

struct osddb_stat {
	afs_uint32 rpc;
	afs_uint64 cnt;
};
typedef osddb_stat osddb_statList<>;

/***************** RX RPCs *********************/

Statistic(
	IN afs_int32 reset,
	OUT afs_uint32 *since,
	OUT osddb_statList *l
) = 1;

AddOsd(
	IN struct osddb_osd_tab *in
) = 10;

GetOsd(
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	OUT struct osddb_osd_tab *out
) = 2;

SetOsd(
	IN struct osddb_osd_tab *in
) = 3;

OsdList (
	OUT struct OsdList *list
) = 4;

SetOsdUsage(
        IN afs_uint32 id,
	IN afs_uint32 bsize,
        IN afs_uint64 blocks,
        IN afs_uint64 blocksFree,
        IN afs_uint64 files,
        IN afs_uint64 filesFree
) = 5;

AddServer (
	IN struct osddb_server_tab *in
) = 6;

SetServer (
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	IN struct osddb_server_tab *tab
) = 7;

GetServer (
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	OUT struct osddb_server_tab *out
) = 8;

ServerList (
	OUT struct OsdList *list
) = 9;

DeleteServer (
	IN struct osddb_server_tab *in
) = 11;

AddPolicy (
	IN afs_uint32	id,
	IN string name<OSDDB_MAXNAMELEN>,
	IN pol_ruleList *rules
) = 12;

PolicyList (
	OUT struct OsdList *list
) = 13;

DeletePolicy (
	IN afs_uint32 id
) = 14;

GetPolicyID (
	IN string name<OSDDB_MAXNAMELEN>,
	OUT afs_uint32 *id
) = 15;

GetPoliciesRevision (
	OUT afs_uint32 *revision
) = 16;

/* Obsolete RPC numbers - needed for compatibility only at RZG */

GetOsd20(
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	OUT struct osddb_osd_tab *out
) = 20;

SetOsd30(
	IN struct osddb_osd_tab *in
) = 30;

AddServer60 (
	IN struct osddb_server_tab *in
) = 60;

SetServer61 (
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	IN struct osddb_server_tab *tab
) = 61;

GetServer62 (
	IN afs_uint32 id,
	IN string name<OSDDB_MAXNAMELEN>,
	OUT struct osddb_server_tab *out
) = 62;

ServerList63 (
	OUT struct OsdList *list
) = 63;

DeleteServer64 (
	IN struct osddb_server_tab *in
) = 64;

AddPolicy65 (
	IN afs_uint32	id,
	IN string name<OSDDB_MAXNAMELEN>,
	IN pol_ruleList *rules
) = 65;

PolicyList66 (
	OUT struct OsdList *list
) = 66;

DeletePolicy67 (
	IN afs_uint32 id
) = 67;

GetPoliciesRevision68 (
	OUT afs_uint32 *revision
) = 68;

GetPolicyID69 (
	IN string name<OSDDB_MAXNAMELEN>,
	OUT afs_uint32 *id
) = 69;
